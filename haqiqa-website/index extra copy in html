<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Haqiqa - 3D Truth Engine</title>
    
    <!-- Tailwind CSS for styling the UI -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Three.js for 3D graphics -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

    <style>
        /* Custom styles to blend UI with the 3D scene */
        body {
            margin: 0;
            overflow: hidden; /* Prevent scrollbars from appearing */
            background-color: #0a0a1a; /* Dark blue-black background */
            font-family: 'Inter', sans-serif;
        }
        #scene-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1; /* Behind the UI */
        }
        #ui-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 2; /* On top of the 3D scene */
            color: white;
            pointer-events: none; /* Allow mouse interaction with canvas, children re-enable it */
        }
        #ui-container > * {
            pointer-events: auto; /* Re-enable pointer events for UI elements */
        }
        .glass-panel {
            background: rgba(10, 10, 30, 0.6);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
    </style>
</head>
<body>

    <!-- This canvas is where the 3D scene will be rendered -->
    <div id="scene-container"></div>

    <!-- This container holds all the user interface elements -->
    <div id="ui-container">
        <!-- Header: Positioned absolutely at the top -->
        <div class="absolute top-8 left-0 right-0 text-center px-4">
            <h1 class="text-5xl md:text-6xl font-bold tracking-tight">Haqiqa</h1>
            <p class="text-lg text-blue-300 opacity-80">Truth, in real time.</p>
        </div>

        <!-- Main Content: Centered vertically and horizontally -->
        <div class="w-full h-full flex flex-col justify-center items-center p-4">
            <!-- Input Form -->
            <div id="input-form" class="w-full max-w-lg p-6 rounded-xl glass-panel transition-opacity duration-500">
                <label for="url-input" class="block text-sm font-medium text-gray-300 mb-2">Paste a social media link to verify</label>
                <div class="flex flex-col sm:flex-row gap-2">
                    <input type="text" id="url-input" class="flex-grow bg-gray-900/50 border border-gray-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="https://...">
                    <button id="verify-button" class="bg-blue-600 hover:bg-blue-500 text-white font-bold py-2 px-6 rounded-lg transition-all duration-300 transform hover:scale-105">
                        Verify
                    </button>
                </div>
            </div>

            <!-- Results Panel -->
            <div id="results-panel" class="w-full max-w-lg p-6 rounded-xl glass-panel mt-8 opacity-0 scale-95 transition-all duration-500 ease-in-out hidden">
                <h2 class="text-2xl font-bold mb-4 flex items-center" id="result-title">
                    <!-- Icon and Title will be injected here -->
                </h2>
                <div id="result-content" class="space-y-3 text-gray-200">
                    <!-- Result details will be injected here -->
                </div>
                <button id="reset-button" class="w-full mt-6 bg-gray-600 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded-lg transition-colors">Verify Another Link</button>
            </div>
        </div>
    </div>

    <script>
        // --- DOM ELEMENT REFERENCES ---
        const sceneContainer = document.getElementById('scene-container');
        const verifyButton = document.getElementById('verify-button');
        const urlInput = document.getElementById('url-input');
        const inputForm = document.getElementById('input-form');
        const resultsPanel = document.getElementById('results-panel');
        const resultTitle = document.getElementById('result-title');
        const resultContent = document.getElementById('result-content');
        const resetButton = document.getElementById('reset-button');
        
        // --- 3D SCENE SETUP ---
        let scene, camera, renderer, core, particles;

        function init() {
            // Scene
            scene = new THREE.Scene();

            // Camera
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.z = 5;

            // Renderer
            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            sceneContainer.appendChild(renderer.domElement);

            // --- 3D OBJECTS ---

            // The Haqiqa Core
            const coreGeometry = new THREE.IcosahedronGeometry(1, 5);
            const coreMaterial = new THREE.MeshPhongMaterial({
                color: 0x2563eb,
                emissive: 0x1d4ed8,
                shininess: 100,
                specular: 0xffffff,
                flatShading: true,
            });
            core = new THREE.Mesh(coreGeometry, coreMaterial);
            scene.add(core);

            // Background Particles
            const particleCount = 5000;
            const particlePositions = new Float32Array(particleCount * 3);
            for (let i = 0; i < particleCount * 3; i++) {
                particlePositions[i] = (Math.random() - 0.5) * 20;
            }
            const particleGeometry = new THREE.BufferGeometry();
            particleGeometry.setAttribute('position', new THREE.BufferAttribute(particlePositions, 3));
            const particleMaterial = new THREE.PointsMaterial({
                color: 0x4f8ac9,
                size: 0.015,
                transparent: true,
                opacity: 0.5
            });
            particles = new THREE.Points(particleGeometry, particleMaterial);
            scene.add(particles);

            // Lighting
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.2);
            scene.add(ambientLight);
            const pointLight = new THREE.PointLight(0x87ceeb, 1, 100); // Sky blue light
            pointLight.position.set(2, 3, 4);
            scene.add(pointLight);
        }

        // --- ANIMATION ---
        let isAnalyzing = false;
        let clock = new THREE.Clock();

        function animate() {
            requestAnimationFrame(animate);

            const elapsedTime = clock.getElapsedTime();

            // Core animation
            core.rotation.y += 0.001;
            core.rotation.x += 0.001;
            core.position.y = Math.sin(elapsedTime * 0.5) * 0.1;

            if (isAnalyzing) {
                // Speed up rotation and pulsate emissive light when analyzing
                core.rotation.y += 0.05;
                core.material.emissiveIntensity = Math.abs(Math.sin(elapsedTime * 10)) * 0.5 + 0.5;
            } else {
                core.material.emissiveIntensity = 1.0;
            }

            // Particle animation
            particles.rotation.y = elapsedTime * 0.05;

            renderer.render(scene, camera);
        }

        // --- UI & INTERACTION LOGIC ---

        function handleVerify() {
            if (!urlInput.value) {
                // Simple validation
                urlInput.classList.add('border-red-500', 'animate-pulse');
                setTimeout(() => urlInput.classList.remove('border-red-500', 'animate-pulse'), 2000);
                return;
            }

            isAnalyzing = true;
            
            // Hide the input form
            inputForm.classList.add('opacity-0');
            
            // Simulate AI analysis (2.5 seconds)
            setTimeout(() => {
                isAnalyzing = false;
                displayResults();
            }, 2500);
        }

        function displayResults() {
            // Mock results - randomly pick one
            const mockResults = [
                {
                    status: 'Verified',
                    color: 'text-green-400',
                    icon: '✅',
                    title: 'Content Verified',
                    content: `<p>Claim: The video shows a recent event.</p><p class="font-bold text-green-300">Status: True.</p><p>Source: Cross-referenced with major news outlets and public records. The event occurred on the date specified.</p>`
                },
                {
                    status: 'False',
                    color: 'text-red-400',
                    icon: '❌',
                    title: 'Content Debunked',
                    content: `<p>Claim: This image is from the recent protest.</p><p class="font-bold text-red-300">Status: False.</p><p>Correction: This image is from a different event that occurred 3 years ago. Reverse image search confirms the original context.</p>`
                },
                {
                    status: 'Unverifiable',
                    color: 'text-yellow-400',
                    icon: '⚠️',
                    title: 'Unverifiable Claim',
                    content: `<p>Claim: The audio in this voice note is authentic.</p><p class="font-bold text-yellow-300">Status: Unverifiable.</p><p>Context: AI analysis could not detect signs of digital manipulation, but the origin and speaker could not be confirmed. Exercise caution.</p>`
                }
            ];
            const result = mockResults[Math.floor(Math.random() * mockResults.length)];

            // Populate and show the results panel
            resultTitle.innerHTML = `<span class="mr-3 text-3xl">${result.icon}</span> ${result.title}`;
            resultTitle.className = `text-2xl font-bold mb-4 flex items-center ${result.color}`;
            resultContent.innerHTML = result.content;
            
            resultsPanel.classList.remove('hidden');
            setTimeout(() => {
                resultsPanel.classList.remove('opacity-0', 'scale-95');
            }, 10); // Short delay to allow display:block to apply before transition
        }

        function handleReset() {
            // Hide results panel
            resultsPanel.classList.add('opacity-0', 'scale-95');
            setTimeout(() => resultsPanel.classList.add('hidden'), 500);

            // Show input form
            urlInput.value = '';
            inputForm.classList.remove('opacity-0');
        }

        // --- EVENT LISTENERS ---
        verifyButton.addEventListener('click', handleVerify);
        resetButton.addEventListener('click', handleReset);
        
        // Handle window resizing
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });

        // --- INITIALIZE ---
        init();
        animate();

    </script>
</body>
</html>